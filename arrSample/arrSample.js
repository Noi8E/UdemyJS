let arr = ["1", "2", "3", "четыре", "пять"];

//.push()  добавляет элементы в коней массива
arr.push('let', 'some', 'push');
//можно добавлять в массив функции например, можно явно указывать индекс - куда вставлять/заменять.
arr[1] = function() {console.log(2+2)};
//могу добавить объект в массив и вызывать его свойство например.
arr[8] = {name: "Kama"};
// 2 основных метода работы с концом массива - .push(), .pop()
// работать с концом массива ВСЕГДА предпочтительнее, т.к. при работе с началом происходит
// несколько действий - удаление элемента, сдвиг ячеек массива на n-1 индекс.
// т.е. берется блять каждый элемент и смещается влево - это дорого.
arr.push([1, 2, 3], [4, 5, 6]);
let cuttedElem = arr.pop();

//Когда происходит наследование массива через создание переменной - это по сути, создание ссылки на массив
// При этом, если я копирнул в константу массив, я могу производить операции с элементами массива, что забавно
const copyArr = arr;
copyArr[70] = "pam-pam";
console.log(`вырезанный элемент через .pop - это ${cuttedElem}`);


//могу вызвать к опказу весь массив, но не выводить функции, обхекты или вложенные массивы.
console.log(copyArr);
//могу вывести адресно элемент массива и тогда выполнится внутрянка ячейки. Но в случае с функцией необходимо
//добавлять круглые скобки для вызова()
console.log(arr[1]());
//вызов свойства объекта из массива
console.log(arr[8].name);

